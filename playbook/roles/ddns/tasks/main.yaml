---
# -----------------------------
# This Ansible playbook consists of three main tasks:
#
#   The first tasks are related to the installation of Docker and all its dependencies.
#  
#   "Pull DDNS Updater Docker image": This task pulls the Docker image for the DDNS Updater.
#
#   "Create data directory": This task creates a directory specified by the variable data_directory.
#
#   "Create config.json in data directory": This task creates a config.json file in the data directory with specific content,
#   This file should be modified based on the DDNS provider used and the specific configuration of your domain.
#
#   "Run DDNS Updater container": This task runs a Docker container for the DDNS Updater, 
#    mapping the specified port and volume, and setting the restart policy to always.
# -----------------------------

    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Pull default Docker image
      community.docker.docker_image:
        name: "{{ default_container_image }}"
        source: pull

    - name: Create default containers
      community.docker.docker_container:
        name: "{{ default_container_name }}{{ item }}"
        image: "{{ default_container_image }}"
        command: "{{ default_container_command }}"
        state: present
      with_sequence: count={{ container_count }}

    - name: Pull DDNS Updater Docker image
      community.docker.docker_image:
        name: "{{ ddns_image }}"
        source: pull

    - name: Create data directory
      file:
        path: "{{ data_directory }}"
        state: directory
        mode: 0777
        owner: 1000
        group: 1000

    - name: Create config.json in data directory
      copy:
        dest: "{{ data_directory }}/config.json"
        content: |
          {
              "settings": [
                  {
                      "provider": "{{ ddns_provider }}",
                      "domain": "{{ ddns_domain }}",
                      "host": "@",
                      "username": "{{ ddns_username }}",
                      "password": "{{ ddns_password }}",
                      "ip_version": "ipv4",
                      "ipv6_suffix": "",
                      "provider_ip": true
                  }
              ]
          }
        mode: 0777

    - name: Run DDNS Updater container
      community.docker.docker_container:
        name: ddns-updater
        image: "{{ ddns_image }}"
        ports:
          - "{{ ddns_port }}:8000"
        volumes:
          - "{{ data_directory }}:/updater/data"
        state: started
        restart_policy: always