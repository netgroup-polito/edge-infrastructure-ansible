- name: Check if prometheus and grafana are already installed
  shell: helm --kubeconfig /etc/rancher/k3s/k3s.yaml status {{ helm.prometheus_release_name }} -n monitoring
  register: helm_prometheus_exists_result
  ignore_errors: true

- name: Create monitoring Namespace
  ansible.builtin.copy:
    src: namespace.yaml
    dest: "./namespace.yaml"
  when: helm_prometheus_exists_result.rc != 0 

- name: Install helm prometheus-community repo
  shell: kubectl apply -f namespace.yaml
  when: helm_prometheus_exists_result.rc != 0

- name: Clean namespace file
  file: 
    path: namespace.yaml 
    state: absent

- name: Install helm prometheus-community repo
  shell: helm --kubeconfig /etc/rancher/k3s/k3s.yaml repo add prometheus-community https://prometheus-community.github.io/helm-charts
  when: helm_prometheus_exists_result.rc != 0

- name: Update helm prometheus-community repo
  shell: helm --kubeconfig /etc/rancher/k3s/k3s.yaml repo update
  when: helm_prometheus_exists_result.rc != 0

- name: Copy grafana helm values yaml
  ansible.builtin.copy:
    src: values.yaml
    dest: "./values.yaml"
  when: helm_prometheus_exists_result.rc != 0

- name: Waiting for ingress controller startup
  shell: kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=60s
  register: wait_result
  retries: 3
  delay: 10
  until: wait_result.rc == 0
  when: helm_prometheus_exists_result.rc != 0

- name: Helm {{ helm.prometheus_release_name }} release 
  shell: helm --kubeconfig /etc/rancher/k3s/k3s.yaml install -f values.yaml {{ helm.prometheus_release_name }} prometheus-community/kube-prometheus-stack -n monitoring
  when: helm_prometheus_exists_result.rc != 0

- name: Clean helm file
  file: 
    path: values.yaml 
    state: absent

- name: Patch prometheus resource to update podMonitorSelector and serviceMonitorSelector
  command: >
    kubectl patch prometheus prometheus-kube-prometheus-prometheus -n monitoring --type=json
    -p '[{"op": "replace", "path": "/spec/podMonitorSelector", "value": {}}, {"op": "replace", "path": "/spec/serviceMonitorSelector", "value": {}}]'
  when: helm_prometheus_exists_result.rc != 0

# Configure Prometheus ingress always (both for new and existing installations)
- name: Check if Prometheus monitoring namespace exists
  shell: kubectl get namespace monitoring
  register: monitoring_ns_exists
  ignore_errors: true

# Configure Prometheus to use correct path
- name: Patch Prometheus CR to use /prometheus prefix
  command: >
    kubectl patch prometheus -n monitoring prometheus-kube-prometheus-prometheus --type=json
    -p '[{"op":"replace","path":"/spec/externalUrl","value":"/prometheus"},{"op":"replace","path":"/spec/routePrefix","value":"/prometheus"}]'
  ignore_errors: true
  when: monitoring_ns_exists.rc == 0

# Delete existing Prometheus ingress
- name: Delete existing Prometheus ingress
  command: kubectl delete ingress prometheus-kube-prometheus-prometheus -n monitoring
  ignore_errors: true
  when: monitoring_ns_exists.rc == 0

# Add direct ingress for Prometheus
- name: Copy prometheus ingress yaml
  ansible.builtin.copy:
    src: prometheus-ingress.yaml
    dest: "./prometheus-ingress.yaml"
  when: monitoring_ns_exists.rc == 0

- name: Apply Prometheus direct ingress
  command: kubectl apply -f prometheus-ingress.yaml
  when: monitoring_ns_exists.rc == 0

# Restart Prometheus pod to pick up configuration changes
- name: Restart Prometheus pod
  shell: kubectl delete pods -n monitoring -l app=prometheus --field-selector=status.phase=Running
  ignore_errors: true
  when: monitoring_ns_exists.rc == 0

- name: Clean prometheus ingress file
  file: 
    path: prometheus-ingress.yaml 
    state: absent
  when: monitoring_ns_exists.rc == 0